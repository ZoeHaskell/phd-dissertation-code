function [M,BWm] = PruneImage(data,map,process,Delta0,bwthres)
% Uses tree pruning to detect edges in an image
%--------------------------------------------------

S = size(data);
if length(S)>2
    data = rgb2gray(data);
end
% Convolution filter is the "Sobel operator" which approximates the 
% gradiant of the image intensity.
data = double(data);

if process == 1
Sigma = 1;
 Nx1=20;Sigmax1=Sigma;Nx2=20;Sigmax2=Sigma;Theta1=0;
%    Y-axis direction filter:
     Ny1=20;Sigmay1=Sigma;Ny2=20;Sigmay2=Sigma;Theta2=0;
% 2. The thresholding parameter alpha:
     alpha=0.1;

if isempty(map)
    w = data;
else    
    w=ind2gray(data,map);
end

filterx=d2dgauss(Nx1,Sigmax1,Nx2,Sigmax2,Theta1);
Ix= conv2(w,filterx,'same');

filtery=d2dgauss(Ny1,Sigmay1,Ny2,Sigmay2,Theta2);
Iy=conv2(w,filtery,'same'); 

% Norm of the gradient
NVI=sqrt(Ix.*Ix+Iy.*Iy);
NVIthres = NVI/(max(max(NVI)));
figure(1)
imshow(NVIthres,[])
im = NVI;
MG = NVI;

else
    im = data;
    MG = im;
       
end

if isempty(bwthres)
    bwthres = 0.14;
end
%-------------------------------------------------------------

[indx, indy] = size(im);
tx = 1:indx;
ty = 1:indy;
LL=[];

Edges=zeros(indx,indy);
VEdges=zeros(indx,indy);
h = waitbar(0,'Please wait...');

Delta = Delta0*(max(max(MG)) - min(min(MG)));

for i=tx
  
    waitbar(i/(indx+indy))
        Y = im(i,:);
    [T,L,~,~,Xs,Fs,~]=level_set_tree(Y,ty);
    T1 = T;
    T2 = T;
    V=[1:length(T)];
    V=[0 V 0]; %root addition so trim knows how to treat nodes
    tlt=[1 Xs length(Y)]; %avoiding starting time at zero, same issue
    Xlt= [0 Fs 0]; %root addition
    tltc=tlt;
    Xltc=Xlt;
    if length(T) <= 3
           for k=1:length(tlt)
            Weights(k) = abs(Xlt(k));
            Edges(i,round(tlt(k)))=Weights(k);
           end
            Flin = fun2grid(Xlt,tlt,ty,1);
            Edges(i,:) = Flin;
       continue
    else
        Dcheck = 0;
       while Dcheck == 0
        [Xt,tt,Vt,NewT1,NewT2,Lt,Dcheck]=pruning(Xlt,tlt,V,T1,T2,L,Delta);
        T1=NewT1;
        T2=NewT2;
        L=Lt;
        Xlt=Xt;
        tlt=tt;
        V=Vt;
            if length(tlt)<=3
                break
            end
        end
        Weights = zeros(1,length(tlt));
        z = 1:length(NewT2);
        for k=1:length(tlt)
              Weights(k) = abs(Xlt(k));
        end
      Flin = fun2grid(Weights,tlt,ty,1);
      Edges(i,:) = Flin;
      figure(1)
      clf(1)
      plot(ty,Y,'k')
      hold on
      plot(ty,Flin,'r')
   
      
    end
        
end


NormCol = zeros(1,indy);

for j=ty
    
    waitbar((j+indx)/(indy+indx))
    Y=im(:,j);
      
    [T,L,~,~,Xs,Fs,~]=level_set_tree(Y,tx);
    V=1:length(T);
    V=[0 V 0]; %root addition
    tlt=[1 Xs length(Y)]; %avoiding starting time at zero, same issue
    Xlt= [0 Fs 0]; %root addition
    tltc=tlt;
    Xltc=Xlt;
    T1 = T;
    T2 = T;
    
    if length(T)<=3
           for k=1:length(tlt)
            Weights(k) = abs(Xlt(k));
            Edges(round(tlt(k)),j)=Weights(k);
           end
            Flin = fun2grid(Xlt,tlt,tx,1);
            VEdges(:,j) = Flin;
        continue
    else
        Dcheck = 0;
%      for k=1:TrimNum  % find while loop condition to replace this with
    while Dcheck == 0     

        [Xt,tt,Vt,NewT1,NewT2,Lt,Dcheck]=pruning(Xlt,tlt,V,T1,T2,L,Delta);
        T1=NewT1;
        T2=NewT2;
        L=Lt;
        Xlt=Xt;
        tlt=tt;
        V=Vt;
            if length(tlt)<=3
                break
            end
    end
    
   
       Weights = zeros(1,length(tlt));
       z = 1:length(NewT2);

        for l=1:length(V)
               Weights(l) = abs(Xlt(l));
            VEdges(round(tlt(l)),j)=Weights(l);
        end
        
    end
   Flin = fun2grid(Weights,tlt,tx,1);
   VEdges(:,j) = Flin;
   
      figure(1)
      clf(1)
      plot(tx,Y,'k')
      hold on
      plot(tx,Flin,'r')
  
end
close(h);

EdgeScale = max(max(Edges));
Edges = Edges/EdgeScale;
VEdgeScale = max(max(VEdges));
VEdges = VEdges/VEdgeScale;

M = zeros(indx,indy);

for i = 1:indx
    for j = 1:indy
        M(i,j) = Edges(i,j) + VEdges(i,j);
    end
end

figure(3)
set(gca,'XTick',1:(indx+1),'YTick',1:(indy+1),...  %# Change some axes properties
        'XLim',[1 indx+1],'YLim',[1 indy+1],...
        'GridLineStyle','-','XGrid','on','YGrid','on');

imshow(M,[])
title('Sum of Trim Results')


BWm = im2bw(M,bwthres);
figure(4)
title('Black and White')
imshow(BWm,[])

axis equal   

end
